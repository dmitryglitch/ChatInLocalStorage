{"version":3,"sources":["reducers/localstorage.js","reducers/index.js","components/Chat/ChatName/ChatName.jsx","components/Chat/Message/Message.jsx","components/Chat/MessageList/MList.jsx","components/Chat/MessageInput/MInput.jsx","components/Chat/Chat.jsx","containers/App.js","actions/localstorage.js","actions/message.js","serviceWorker.js","index.js"],"names":["initialState","isStorage","chats","id","chatName","idMember","messageList","text","idSender","users","name","avatarUrl","localstorage","state","action","type","payload","concat","combineReducers","ChatName","className","Message","src","alt","MList","userId","map","message","i","key","MInput","handleInput","handleKeyDown","onChange","e","target","value","onKeyDown","keyCode","Chat","inputValue","setState","newMessage","props","onSendMessage","chat","JSON","parse","localStorage","getItem","push","setItem","stringify","this","Component","App","onInitLocalStorage","onInitStore","connect","dispatch","initLocalStorage","initStore","sendMessage","Boolean","window","location","hostname","match","store","createStore","reducer","__REDUX_DEVTOOLS_EXTENSION__","rootElement","document","getElementById","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.e77596e6.chunk.js","sourcesContent":["const initialState = {\r\n  isStorage: false,\r\n  chats: {\r\n    id: 0,\r\n    chatName: \"Question #1\",\r\n    idMember: 1,\r\n    messageList: [\r\n      {\r\n        text: \"Привет\",\r\n        idSender: 1,\r\n      },\r\n      {\r\n        text: \"Давай протестируем наш новый чат для общения с тех.поддержкой?\",\r\n        idSender: 1,\r\n      },\r\n      {\r\n        text: \"Давай приступим!\",\r\n        idSender: 0,\r\n      },\r\n    ],\r\n  },\r\n  users: [\r\n    {\r\n      id: 0,\r\n      name: \"Support Masha\",\r\n      avatarUrl:\r\n        \"https://cdn0.iconfinder.com/data/icons/user-pictures/100/supportfemale-2-512.png\",\r\n    },\r\n    {\r\n      id: 1,\r\n      name: \"Dmitry Bykov\",\r\n      avatarUrl:\r\n        \"https://raw.githubusercontent.com/Ashwinvalento/cartoon-avatar/master/lib/images/female/68.png\",\r\n    },\r\n  ],\r\n};\r\n\r\nconst localstorage = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"INIT_LOCALSTORAGE\":\r\n      return {\r\n        ...state,\r\n        isStorage: action.payload,\r\n      };\r\n    case \"INIT_STORE\":\r\n      return {\r\n        ...state,\r\n        isStorage: true,\r\n        chats: action.payload.chats,\r\n        users: action.payload.users,\r\n      };\r\n    case \"SEND_MESSAGE\":\r\n      return {\r\n        ...state,\r\n        chats: {\r\n          ...state.chats,\r\n          messageList: state.chats.messageList.concat(action.payload),\r\n        },\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default localstorage;\r\n","import { combineReducers } from \"redux\";\r\nimport localstorage from './localstorage'\r\n\r\nexport default combineReducers({\r\n    localstorage\r\n});\r\n","import React from \"react\";\r\nimport \"./ChatName.css\";\r\n\r\nconst ChatName = ({ chatName }) => {\r\n  return (\r\n    <>\r\n      <div className=\"chat__container__item__chatname\">\r\n        <p className=\"chat__container__item__chatname__name\">{chatName}</p>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ChatName;\r\n","import React from \"react\";\r\nimport \"./Message.css\";\r\n\r\nconst Message = ({ text, type, avatarUrl }) => {\r\n  return (\r\n    <>\r\n      <div\r\n        className={\r\n          type === \"left\"\r\n            ? \"chat__container__item__messagelist__message__left\"\r\n            : \"chat__container__item__messagelist__message__right\"\r\n        }\r\n      >\r\n        <div className=\"chat__container__item__messagelist__message__avatar\">\r\n          <img src={avatarUrl} alt=\"\" />\r\n        </div>\r\n        <div className=\"chat__container__item__messagelist__message__text\">\r\n          <p> {text} </p>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Message;\r\n","import React from \"react\";\r\nimport Message from \"../Message/Message.jsx\";\r\nimport \"./MList.css\";\r\n\r\nconst MList = ({ messageList, userId, users }) => {\r\n  return (\r\n    <>\r\n      <div className=\"chat__container__item__messagelist\">\r\n        {messageList.map((message, i) => {\r\n          return (\r\n            <Message\r\n              key={i}\r\n              type={userId === message.idSender ? \"right\" : \"left\"}\r\n              text={message.text}\r\n              idSender={message.idSender}\r\n              avatarUrl={users[message.idSender].avatarUrl}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MList;\r\n","import React from \"react\";\r\nimport \"./MInput.css\";\r\n\r\nconst MInput = ({ handleInput, handleKeyDown }) => {\r\n  return (\r\n    <>\r\n      <div className=\"chat__container__item__input\">\r\n        <input\r\n          onChange={(e) => {\r\n            handleInput(e.target.value);\r\n          }}\r\n          onKeyDown={(e) => {\r\n            if (e.keyCode === 13) {\r\n              e.target.value = \"\";\r\n              handleKeyDown();\r\n            }\r\n          }}\r\n          type=\"text\"\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MInput;\r\n","import React, { Component } from \"react\";\r\nimport \"./Chat.css\";\r\n\r\nimport ChatName from \"./ChatName/ChatName.jsx\";\r\nimport MList from \"./MessageList/MList.jsx\";\r\nimport MInput from \"./MessageInput/MInput.jsx\";\r\n\r\nclass Chat extends Component {\r\n  state = {\r\n    inputValue: \"\",\r\n  };\r\n\r\n  handleInput = (value) => {\r\n    this.setState({\r\n      inputValue: value,\r\n    });\r\n  };\r\n\r\n  handleKeyDown = () => {\r\n    const newMessage = {\r\n      text: this.state.inputValue,\r\n      idSender: this.props.userId,\r\n    };\r\n\r\n    // вызываем action на отправку нового сообщения в стор и записываем его в localstorage\r\n    this.props.onSendMessage(newMessage.text, newMessage.idSender);\r\n    let chat = JSON.parse(localStorage.getItem(\"chats\"));\r\n    chat.messageList.push(newMessage);\r\n    localStorage.setItem(\"chats\", JSON.stringify(chat));\r\n\r\n    // очищаем наш инпут от прошлого сообщения\r\n    this.setState({ inputValue: \"\" });\r\n  };\r\n\r\n  render() {\r\n    const { users, userId } = this.props;\r\n    const { messageList, chatName } = this.props.chats;\r\n    return (\r\n      <>\r\n        <ChatName chatName={chatName} />\r\n        <MList messageList={messageList} users={users} userId={userId} />\r\n        <MInput\r\n          handleInput={this.handleInput}\r\n          handleKeyDown={this.handleKeyDown}\r\n        />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Chat;\r\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\n// import logo from \"../logo.svg\";\nimport \"./App.css\";\nimport Chat from \"../components/Chat/Chat.jsx\";\n\nimport { initLocalStorage, initStore } from \"../actions/localstorage.js\";\nimport { sendMessage } from \"../actions/message.js\";\n\nclass App extends Component {\n  componentDidMount() {\n    // проверка на первый запуск приложения\n    // если нет записи в локальном хранилище, то мы записываем наш инициальный стор\n    // если напротив есть, то актуализируем наш стор\n    const { chats, users, onInitLocalStorage, onInitStore } = this.props;\n\n    if (localStorage.getItem(\"chats\") == null) {\n      onInitLocalStorage(chats, users);\n    } else {\n      const localStorageChats = JSON.parse(localStorage.getItem(\"chats\"));\n      const localStorageUsers = JSON.parse(localStorage.getItem(\"users\"));\n\n      onInitStore(localStorageChats, localStorageUsers);\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"chat\">\n          <div className=\"chat__container\">\n            <div className=\"chat__container__item user\">\n              <Chat\n                type=\"user\"\n                userId={this.props.users[1].id}\n                chats={this.props.chats}\n                users={this.props.users}\n                onSendMessage={this.props.onSendMessage}\n              />\n            </div>\n            <div className=\"chat__container__item supporter\">\n              <Chat\n                type=\"supporter\"\n                userId={this.props.users[0].id}\n                chats={this.props.chats}\n                users={this.props.users}\n                onSendMessage={this.props.onSendMessage}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  (state) => ({\n    chats: state.localstorage.chats,\n    users: state.localstorage.users,\n  }),\n  (dispatch) => ({\n    onInitLocalStorage: (chats, users) => {\n      dispatch(initLocalStorage(chats, users));\n    },\n    onInitStore: (chats, users) => {\n      dispatch(initStore(chats, users));\n    },\n    onSendMessage: (idSender, text) => {\n      dispatch(sendMessage(idSender, text));\n    },\n  })\n)(App);\n","export const initLocalStorage = (chats, users) => {\r\n  localStorage.setItem(\"chats\", JSON.stringify(chats));\r\n  localStorage.setItem(\"users\", JSON.stringify(users));\r\n\r\n  return { type: \"INIT_LOCALSTORAGE\", payload: true };\r\n};\r\n\r\nexport const initStore = (chats, users) => {\r\n  let data = {\r\n    chats,\r\n    users,\r\n  };\r\n    \r\n  return { type: \"INIT_STORE\", payload: data };\r\n};\r\n","export const sendMessage = (text, idSender) => {\r\n  let data = {\r\n    text: text,\r\n    idSender: idSender,\r\n  };\r\n\r\n  return {\r\n    type: \"SEND_MESSAGE\",\r\n    payload: data,\r\n  };\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\n\nimport './index.css';\nimport reducer from './reducers'\nimport App from './containers/App.js';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(reducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\nconst rootElement = document.getElementById(\"root\");\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  rootElement\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}